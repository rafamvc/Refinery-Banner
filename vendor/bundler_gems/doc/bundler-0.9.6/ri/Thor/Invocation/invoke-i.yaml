--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Receives a name and invokes it. The name can be a string (either &quot;task&quot; or &quot;namespace:task&quot;), a Thor::Task, a Class or a Thor instance. If the task cannot be guessed by name, it can also be supplied as second argument.
- !ruby/struct:SM::Flow::P 
  body: You can also supply the arguments, options and configuration values for the task to be invoked, if none is given, the same values used to initialize the invoker are used to initialize the invoked.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  class A &lt; Thor\n    def foo\n      invoke :bar\n      invoke &quot;b:hello&quot;, [&quot;Jos\xC3\xA9&quot;]\n    end\n\n    def bar\n      invoke &quot;b:hello&quot;, [&quot;Jos\xC3\xA9&quot;]\n    end\n  end\n\n  class B &lt; Thor\n    def hello(name)\n      puts &quot;hello #{name}&quot;\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "You can notice that the method &quot;foo&quot; above invokes two tasks: &quot;bar&quot;, which belongs to the same class and &quot;hello&quot; which belongs to the class B."
- !ruby/struct:SM::Flow::P 
  body: By using an invocation system you ensure that a task is invoked only once. In the example above, invoking &quot;foo&quot; will invoke &quot;b:hello&quot; just once, even if it's invoked later by &quot;bar&quot; method.
- !ruby/struct:SM::Flow::P 
  body: "When class A invokes class B, all arguments used on A initialization are supplied to B. This allows lazy parse of options. Let's suppose you have some rspec tasks:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Rspec &lt; Thor::Group\n    class_option :mock_framework, :type =&gt; :string, :default =&gt; :rr\n\n    def invoke_mock_framework\n      invoke &quot;rspec:#{options[:mock_framework]}&quot;\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "As you noticed, it invokes the given mock framework, which might have its own options:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Rspec::RR &lt; Thor::Group\n    class_option :style, :type =&gt; :string, :default =&gt; :mock\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Since it's not rspec concern to parse mock framework options, when RR is invoked all options are parsed again, so RR can extract only the options that it's going to use.
- !ruby/struct:SM::Flow::P 
  body: "If you want Rspec::RR to be initialized with its own set of options, you have to do that explicitely:"
- !ruby/struct:SM::Flow::VERB 
  body: "  invoke &quot;rspec:rr&quot;, [], :style =&gt; :foo\n"
- !ruby/struct:SM::Flow::P 
  body: "Besides giving an instance, you can also give a class to invoke:"
- !ruby/struct:SM::Flow::VERB 
  body: "  invoke Rspec::RR, [], :style =&gt; :foo\n"
full_name: Thor::Invocation#invoke
is_singleton: false
name: invoke
params: (name=nil, task=nil, args=nil, opts=nil, config=nil)
visibility: public
